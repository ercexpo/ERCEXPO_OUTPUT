us$party_strength <- abs(us$party - 4)
# flip news ideology for those with anti-government position
us <- us %>%
mutate(news_like = ifelse(
party_bin == "Democrat", news_ideo*(-1), news_ideo))
# also for self-reported exposure
us <- us %>%
mutate(news_like_self = ifelse(
party_bin == "Anti", news_ideo_self*(-1), news_ideo_self))
# invert negatively coded items
for (i in c(2,4,5)){us[,paste0("know_", i, "_post")] =
invert(us[,paste0("know_", i, "_post")])}
# correct incorrect dummy for knowledge questions
for (i in 1:4){
us[,paste0("know_fac_",i, "_post")] =
recode(us[,paste0("know_fac_",i, "_post")],
`1` = 1, `2` = 0, `3` = 0, `4` = 0, .default = 0)
}
# calculate row means and totals
us$know_post = rowMeans(select(us,paste0("know_", c(1:5), "_post")), na.rm = T)
us$know_fac_post = rowSums(select(us,paste0("know_fac_", c(1:4), "_post")),
na.rm = T)
# UNITED STATES
us$ptc_post = sapply(strsplit(us$ptc, ","), length)
# UNITED STATES
us_issues = c("gun", "immigrant", "climate", "econ")
us$att_str_pre = rowMeans(select(us, paste0("att_str_", us_issues, "_pre")))
us$att_str_post = rowMeans(select(us, paste0("att_str_", us_issues, "_post")))
us$att_imp_pre = rowMeans(select(us, paste0("att_imp_", us_issues, "_pre")))
us$att_imp_post = rowMeans(select(us, paste0("att_imp_", us_issues, "_post")))
# invert all feeling thermometer variables
for(i in names(us)[grepl("ft_", names(us))]){us[,i] = invert(us[,i])}
# identify affective polarization variable according to partisanship
for (i in 1:3){
var = c("ft", "under", "stupid")[i]
var_party = paste0(var, "_party_op")
var_ideo = paste0(var, "_ideo_op")
for (w in c("_pre", "_post")){
for (j in 1:2){
newvar = list(var_party, var_ideo)[[j]]
if (i == 1){
g1 = c(paste0(var, "_dem"), paste0(var, "_lib"))[j]
g2 = c(paste0(var, "_rep"), paste0(var,"_cons"))[j]
} else {
g1 = paste0(var, "_party_opp")
g2 = paste0(var, "_party_opp")
}
us[, paste0(newvar, w)] = us[, paste0(g1, w)]
us[us$party_bin == "Democrat" & !is.na(us$party_bin), paste0(newvar, w)] =
us[us$party_bin == "Democrat" & !is.na(us$party_bin), paste0(g2, w)]
}
# dimensions: out-partisans, out-ideologues, out-policy
us[, paste0(var, w)] = rowMeans(cbind(
select(us, paste0(var_party, w), paste0(var_ideo, w)),
rowMeans(select(us, paste0(var, paste0("_", us_issues), w)),
na.rm = T),
na.rm = T))
}}
# invert negatively coded items
for (i in 4:5){
us[,paste0("malvol_", i, "_pre")] = invert(us[,paste0("malvol_", i, "_pre")])
us[,paste0("malvol_", i, "_post")] = invert(us[,paste0("malvol_", i, "_post")])
}
# calculate row means
us$malvol_pre = rowMeans(select(us, paste0("malvol_", 1:5, "_pre")), na.rm = T)
us$malvol_post =
rowMeans(select(us, paste0("malvol_", 1:5, "_post")), na.rm = T)
# invert inversely coded scales
for (i in 1:4){
us[,paste0("comp_", i, "_pre")] = invert(us[,paste0("comp_", i, "_pre")])
us[,paste0("comp_", i, "_post")] = invert(us[,paste0("comp_", i, "_post")])
}
# calculate row means
us$comp_pre = rowMeans(select(us, paste0("comp_", 1:4, "_pre")), na.rm = T)
us$comp_post = rowMeans(select(us, paste0("comp_", 1:4, "_post")), na.rm = T)
# UNITED STATES
us$perpol_pre = rowMeans(select(us, paste0("perpol_", 1:4, "_pre")), na.rm = T)
us$perpol_post =
rowMeans(select(us, paste0("perpol_", 1:4, "_post")), na.rm = T)
# invert inversely coded items
for (i in 3:6){
us[, paste0("well_feel_", i, "_post")] =
invert(us[, paste0("well_feel_", i, "_post")])
}
us$well_act_5_post = invert(us$well_act_5_post)
# calculate row means
us$well_feel_post =
rowMeans(select(us, paste0("well_feel_", 1:6, "_post")), na.rm = T)
us$well_act_post =
rowMeans(select(us, paste0("well_act_", 1:5, "_post")), na.rm = T)
# UNITED STATES
colnames(us) = gsub("_pre", "_w1", names(us))
colnames(us) = gsub("_post", "_w2", names(us))
us_long = long_panel(us, prefix = "_w",
begin = 1, end = 2, label_location = "end")
View(us_long)
# also for self-reported exposure
us <- us %>%
mutate(news_like_self = ifelse(
party_bin == "Democrat", news_ideo_self*(-1), news_ideo_self))
colnames(us) = gsub("_pre", "_w1", names(us))
colnames(us) = gsub("_post", "_w2", names(us))
us_long = long_panel(us, prefix = "_w",
begin = 1, end = 2, label_location = "end")
us_long = data.frame(us_long)
# Dependent variables between 0 and 100
dvs = c("know", "know_fac", "ptc", "att_str", "att_imp", "ft", "under",
"stupid", "malvol", "comp", "perpol", "well_act", "well_feel")
for (var in dvs){
# pl_long[,paste0(var, "_r")] = rescale_100(pl_long[,var])
us_long[,paste0(var, "_r")] = rescale_100(us_long[,var])
}
us_long <- us_long %>%
mutate(news_log = log(news + 1))
write.csv(us, paste0(datadir, "us_survey_wide_NEW.csv"))
write.csv(us_long, paste0(datadir, "us_survey_long_NEW.csv"))
vars = c("know_r", "know_fac_r", "ptc_r", "att_str_r", "att_imp_r",
"ft_r", "under_r", "stupid_r", "malvol_r", "comp_r", "perpol_r",
"well_feel_r", "well_act_r", "news", "news_like", "news_self",
"news_like_self", "wave", "condition", "person_id",
"party_bin", "party_strength")
df = read.csv(paste0(datadir, "us_survey_long.csv")) %>%
select(., vars) %>%
mutate(country = "United States") %>%
bind_rows(
list(., read.csv(paste0(datadir, "pl_survey_long.csv")) %>%
select(., vars) %>%
mutate(country = "Poland"))) %>%
filter(condition != "")
vars
i <- 1
var <- "know_r"
print(var)
cntry <- ""Poland""
cntry <- "Poland"
dat = subset(df, country == cntry)
grepl("know|ptc|well", var) == T
dat_new = subset(dat, wave == 2)
dv = var; iv = ""
names(dat_new)
for (cntry in c("Poland", "United States")){
dat = subset(df, country == cntry)
if (grepl("know|ptc|well", var) == T){
dat_new = subset(dat, wave == 2)
dv = var; iv = ""
} else {
dat_new = dat %>%
panel_data(dat, id = "person_id", wave = wave) %>%
widen_panel(., separator = "_w")
dv = paste0(var, "_w2");  iv = paste0(" +", var, "_w1")
}
for (j in 1:5){
eq = c(
paste0(dv, " ~ condition", iv),
paste0(dv, " ~ condition + news_self + news_self*condition", iv),
paste0(dv, " ~ condition + news + news*condition", iv),
paste0(dv, " ~ condition + news_like_self + news_like_self*condition", iv),
paste0(dv, " ~ condition + news_like + news_like*condition", iv)
)[j]
modelname = c("Treatment Effects",
"Prior News Exposure (Self-Report)",
"Prior News Exposure (Behavioral)",
"Prior Like-Minded News Exposure (Self-Report)",
"Prior Like-Minded News Exposure (Behavioral)")[j]
if ("condition_w1" %in% names(dat_new)){
dat_new = dat_new %>%
rename(condition = condition_w1)
}
models[[length(models) + 1]] = lm(as.formula(eq), data = dat_new) %>%
model_to_table() %>%
mutate(model = paste0("Model ", j ,letters[i])) %>%
mutate(modelname = modelname) %>%
mutate(data = datname) %>%
mutate(country = cntry) %>%
mutate(var = var)
}}
for (j in 1:5){
eq = c(
paste0(dv, " ~ condition", iv),
paste0(dv, " ~ condition + news_self + news_self*condition", iv),
paste0(dv, " ~ condition + news + news*condition", iv),
paste0(dv, " ~ condition + news_like_self + news_like_self*condition", iv),
paste0(dv, " ~ condition + news_like + news_like*condition", iv)
)[j]
modelname = c("Treatment Effects",
"Prior News Exposure (Self-Report)",
"Prior News Exposure (Behavioral)",
"Prior Like-Minded News Exposure (Self-Report)",
"Prior Like-Minded News Exposure (Behavioral)")[j]
if ("condition_w1" %in% names(dat_new)){
dat_new = dat_new %>%
rename(condition = condition_w1)
}
models[[length(models) + 1]] = lm(as.formula(eq), data = dat_new) %>%
model_to_table() %>%
mutate(model = paste0("Model ", j ,letters[i])) %>%
mutate(modelname = modelname) %>%
# mutate(data = datname) %>%
mutate(country = cntry) %>%
mutate(var = var)
}}
models = list()
for (var in vars[1:13]){
print(var)
for (cntry in c("Poland", "United States")){
dat = subset(df, country == cntry)
datname =
if (grepl("know|ptc|well", var) == T){
dat_new = subset(dat, wave == 2)
dv = var; iv = ""
} else {
dat_new = dat %>%
panel_data(dat, id = "person_id", wave = wave) %>%
widen_panel(., separator = "_w")
dv = paste0(var, "_w2");  iv = paste0(" +", var, "_w1")
}
for (j in 1:5){
eq = c(
paste0(dv, " ~ condition", iv),
paste0(dv, " ~ condition + news_self + news_self*condition", iv),
paste0(dv, " ~ condition + news + news*condition", iv),
paste0(dv, " ~ condition + news_like_self + news_like_self*condition", iv),
paste0(dv, " ~ condition + news_like + news_like*condition", iv)
)[j]
modelname = c("Treatment Effects",
"Prior News Exposure (Self-Report)",
"Prior News Exposure (Behavioral)",
"Prior Like-Minded News Exposure (Self-Report)",
"Prior Like-Minded News Exposure (Behavioral)")[j]
if ("condition_w1" %in% names(dat_new)){
dat_new = dat_new %>%
rename(condition = condition_w1)
}
models[[length(models) + 1]] = lm(as.formula(eq), data = dat_new) %>%
model_to_table() %>%
mutate(model = paste0("Model ", j ,letters[i])) %>%
mutate(modelname = modelname) %>%
# mutate(data = datname) %>%
mutate(country = cntry) %>%
mutate(var = var)
}}
}
View(models)
models = do.call(rbind, models)
View(models)
##apply the fdr adjustment
models$p_adjusted <- p.adjust(models$p, method = "fdr")
fig_dat = models[grepl("condition|news", models$coeff),] %>%
mutate(
coeff = recode(coeff,
"news" =  "Exposure",
"news_self" = "Exposure",
"news_like" = "Exposure",
"news_like_self" = "Exposure",
"conditionMore News - Experiment" = "Treatment",
"conditionNo News - Experiment" = "Treatment",
"conditionMore News - Experiment:news_self" = "Exposure × Treatment",
"conditionMore News - Experiment:news_like_self" = "Exposure × Treatment",
"conditionMore News - Experiment:news" = "Exposure × Treatment",
"conditionMore News - Experiment:news_like" = "Exposure × Treatment",
"conditionNo News - Experiment:news_self" = "Exposure × Treatment",
"conditionNo News - Experiment:news_like_self" = "Exposure × Treatment",
"conditionNo News - Experiment:news" = "Exposure × Treatment",
"conditionNo News - Experiment:news_like" =   "Exposure × Treatment")) %>%
mutate(varno = case_when(
# Main effects
modelname == "Treatment Effects" ~ 17,
# News exposure - self-report
modelname == "Prior News Exposure (Self-Report)" &
coeff == "Treatment" ~ 15,
modelname == "Prior News Exposure (Self-Report)" &
coeff == "Exposure" ~ 14,
modelname == "Prior News Exposure (Self-Report)" &
coeff == "Exposure × Treatment" ~ 13,
# News exposure - behavioral
modelname == "Prior News Exposure (Behavioral)" & coeff == "Treatment" ~ 11,
modelname == "Prior News Exposure (Behavioral)" & coeff == "Exposure" ~ 10,
modelname == "Prior News Exposure (Behavioral)" &
coeff == "Exposure × Treatment" ~ 9,
# Like-minded news exposure - self-report
modelname == "Prior Like-Minded News Exposure (Self-Report)" &
coeff == "Treatment" ~ 7,
modelname == "Prior Like-Minded News Exposure (Self-Report)" &
coeff == "Exposure" ~ 6,
modelname == "Prior Like-Minded News Exposure (Self-Report)" &
coeff == "Exposure × Treatment" ~ 5,
# Like-minded news exposure - behavioral
modelname == "Prior Like-Minded News Exposure (Behavioral)" &
coeff == "Treatment" ~ 3,
modelname == "Prior Like-Minded News Exposure (Behavioral)" &
coeff == "Exposure" ~ 2,
modelname == "Prior Like-Minded News Exposure (Behavioral)" &
coeff == "Exposure × Treatment" ~ 1,
)) %>%
mutate(country = recode(country,
"Poland" = "More News",
"United States" = "No News"
)) %>%
mutate(var = recode(var,
'know_r' = 'A. Political Engagement:\nSelf-perceived Knowledge',
'know_fac_r' = 'B. Political Engagement:\nActual Knowledge',
'ptc_r' = 'C. Political Engagement:\nParticipation',
'att_str_r' = 'D. Attitude Polarization:\nAttitude Strength',
'att_imp_r' = 'E. Attitude Polarization:\nAttitude Importance',
'ft_r' = 'F. Affective Polarization:\nFeeling Thermometer',
'under_r' = 'G. Affective Polarization:\nLack of Understanding',
'stupid_r' = 'H. Affective Polarization:\nStupid',
'malvol_r' = 'I. Negative System Perceptions:\nAttribution of Malevolence',
'comp_r' = 'J. Negative System Perceptions:\nNo Support for Compromise',
'perpol_r' = 'K. Negative System Perceptions:\nPerceived Polarization',
'well_feel_r' = 'L. Well-being: Mental',
'well_act_r' = 'M. Well-being: Physical'))
View(fig_dat)
dist = 0.25
s = 2
s2 = 0.3
fig_dat$varno_r[fig_dat$country == "More News"] = fig_dat$varno + dist
fig_dat$varno_r[fig_dat$country == "No News"] = fig_dat$varno - dist
## the figure for all participants
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7) +
geom_point(data = subset(fig_dat, data == "All"),
aes(y = varno_r, x = est, #shape = data,
fill = country),
color = "white", size = s2) +
# Compliance checks
# geom_point(data = subset(fig_dat, data == "Self-Reported Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black") +
#
# geom_point(data = subset(fig_dat, data == "Online Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black", size = s2) +
scale_y_continuous(
breaks = c(1:18),
labels = c(
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3b: Congenial News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3a: Congenial News (Self-Report)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2b: News News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2a: News (Self-Report)")),
"Treatment",
expression(bold("Model 1: Treatment"))
)) +
scale_x_continuous(limits = c(-20,20))+
scale_fill_manual(values = c("grey60", "goldenrod1")) +
scale_colour_manual(values = c("grey60", "goldenrod1")) +
scale_shape_manual(values = c(21, 8, 4)) +
theme_minimal() +
facet_wrap(var ~ ., ncol = 5) +
theme(legend.position = 'bottom', legend.title = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(1, "lines"), axis.title = element_blank(),
axis.text.y = element_text(size = 7)
)
## the figure for all participants
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7) +
geom_point(data = subset(fig_dat, data == "All"),
aes(y = varno_r, x = est, #shape = data,
fill = country),
color = "white", size = s2) +
# Compliance checks
# geom_point(data = subset(fig_dat, data == "Self-Reported Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black") +
#
# geom_point(data = subset(fig_dat, data == "Online Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black", size = s2) +
scale_y_continuous(
breaks = c(1:18),
labels = c(
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3b: Congenial News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3a: Congenial News (Self-Report)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2b: News News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2a: News (Self-Report)")),
"Treatment",
expression(bold("Model 1: Treatment"))
)) +
scale_x_continuous(limits = c(-20,20))+
scale_fill_manual(values = c("grey60", "goldenrod1")) +
scale_colour_manual(values = c("grey60", "goldenrod1")) +
scale_shape_manual(values = c(21, 8, 4)) +
theme_minimal() +
facet_wrap(var ~ ., ncol = 5) +
theme(legend.position = 'bottom', legend.title = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(1, "lines"), axis.title = element_blank(),
axis.text.y = element_text(size = 7)
)
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7)
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7) +
geom_point(data = subset(fig_dat, data == "All"),
aes(y = varno_r, x = est, #shape = data,
fill = country),
color = "white", size = s2)
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7) +
geom_point(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, x = est, #shape = data,
fill = country),
color = "white", size = s2)
## the figure for all participants
ggplot() +
geom_vline(xintercept = 0, linetype = "dashed", colour = "grey60") +
# Main analyses
geom_segment(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, yend = varno_r,
xend = ub, x = lb, colour = country),
size = s, lineend = "round", alpha = 0.7) +
geom_point(data = fig_dat,
# data = subset(fig_dat, data == "All"),
aes(y = varno_r, x = est, #shape = data,
fill = country),
color = "white", size = s2) +
# Compliance checks
# geom_point(data = subset(fig_dat, data == "Self-Reported Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black") +
#
# geom_point(data = subset(fig_dat, data == "Online Compliers"),
#            aes(y = varno_r, x = est, shape = data, group = country),
#            color = "black", size = s2) +
scale_y_continuous(
breaks = c(1:18),
labels = c(
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3b: Congenial News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 3a: Congenial News (Self-Report)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2b: News News (Behavioral)")),
"Treatment", "Exposure", "Treatment × Exposure",
expression(bold("Model 2a: News (Self-Report)")),
"Treatment",
expression(bold("Model 1: Treatment"))
)) +
scale_x_continuous(limits = c(-20,20))+
scale_fill_manual(values = c("grey60", "goldenrod1")) +
scale_colour_manual(values = c("grey60", "goldenrod1")) +
scale_shape_manual(values = c(21, 8, 4)) +
theme_minimal() +
facet_wrap(var ~ ., ncol = 5) +
theme(legend.position = 'bottom', legend.title = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(1, "lines"), axis.title = element_blank(),
axis.text.y = element_text(size = 7)
)
table(fig_dat$p_adjusted)
models <- models %>%
mutate(sig = ifelse(p_adjusted < 0.05, TRUE, FALSE))
models %>% filter(sig == TRUE)
fig_dat <- models %>%
filter(grepl("condition|news", .$coeff))
View(fig_dat)
##apply the fdr adjustment
fig_dat$p_adjusted <- p.adjust(fig_dat$p, method = "fdr")
fig_dat <- fig_dat %>%
mutate(sig = ifelse(p_adjusted < 0.05, TRUE, FALSE))
table(fig_dat$sig)
fig_dat %>% filter(sig == TRUE)
test <- fig_dat %>% filter(sig == TRUE)
View(test)
fig_dat <- models %>%
filter(grepl("condition|:", .$coeff))
View(fig_dat)
##apply the fdr adjustment
fig_dat$p_adjusted <- p.adjust(fig_dat$p, method = "fdr")
fig_dat <- fig_dat %>%
mutate(sig = ifelse(p_adjusted < 0.05, TRUE, FALSE))
test <- fig_dat %>% filter(sig == TRUE)
